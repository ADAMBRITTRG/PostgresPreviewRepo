# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: localpostgres-pipeline

trigger: 
  branches:
    include:
    - main
  paths:
    include: 
    - Postgrespreview
 
pool:
  vmImage: 'ubuntu-latest'

variables:
- group: POSTGRES_VARIABLE_GROUP
# Where the flyway.conf file resides for your project
- name: FLYWAY_CONFIG_FILES
  value: $(Build.Repository.LocalPath)/PostgresPreview/flyway.conf
# Where where your flyway migrations reside in your project
- name: FLYWAY_LOCATIONS
  value: $(Build.Repository.LocalPath)/PostgresPreview/Migrations


stages:
- stage: "CI"
  displayName: "Database CI"
  jobs:
  - job: Database_Build_and_Test
    displayName: Build DB, run unit tests
    steps:
    - task: CmdLine@2
      displayName: Run all migrations on a clean database
      inputs:
        script: "docker run --rm -v $(FLYWAY_LOCATIONS):/flyway/sql flyway/flyway clean migrate 
        -user=$(EMPTY_USER) -password=$(EMPTY_PASSWORD) 
        -url='$(EMPTY_URL)'
        -licenseKey=$(FLYWAY_LICENSE_KEY)
        -errorOverrides=S0001:0:I-
        > $(Build.ArtifactStagingDirectory)/Build_results.txt"
    - task: CmdLine@2
      enabled: false
      displayName: SQL static analysis (uses SQLFluff)
      # Should static analysis be part of the pre-release stage and only apply to pending scripts? If so, easier to run within flyway
      # https://stackoverflow.com/questions/70787432/permission-denied-error-in-github-actions
    - task: PublishPipelineArtifact@1
      displayName: Publish Build Artifacts
      inputs:
        targetPath: '$(Build.Repository.LocalPath)/PostgresPreview/migrations'
        artifact: Flyway-migrations
        publishLocation: 'pipeline'

- stage: Deploy
  displayName: Database Deployment
  jobs:
  - job: DeployToProd
    steps:
# Ideally we should have a task that compares Acceptance with Prod to ensure they are at the same version
    - download: current
      artifact: Flyway-migrations
    - task: CmdLine@2
      displayName: ls-pipeline-workspace-folder
      inputs:
        script: "ls $(Pipeline.Workspace)"
    - task: CmdLine@2
      displayName: Flyway info (pre-deployment)
      inputs:
        script: "docker run --rm -v $(Pipeline.Workspace)/Flyway-migrations:/flyway/sql flyway/flyway migrate
        -outOfOrder=true -schemas=public
        -user=$(QA_USER) -password=$(QA_PASSWORD) 
        -url='$(QA_URL)'
        -licenseKey=$(FLYWAY_LICENSE_KEY)"